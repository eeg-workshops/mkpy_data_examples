{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Picture memory\n",
    "\n",
    "This builds on the P300 and WR example.\n",
    "\n",
    "Design\n",
    "* study-test recognition memory \n",
    "* Study phase: 50 pictures were presented for 2s and judged \"like\" or \"dislike\", indicated by a button press\n",
    "* Test phase: The same 50 studied items were presented with 50 distractor items in pseudo-random order and judged \"old\" or \"new\".\n",
    "* The 50 studied and 50 distractor items are counterbalanced across subjects so the individual pictures are studied for half the participants and distractors for the other half.\n",
    "\n",
    "Automated code tagging \n",
    " * tag individual stimulus items are \n",
    " * stimulus categories\n",
    " * response categories\n",
    " * **local** (within-trial) stimulus-response contigent tags: \"old\", \"new\", \"hit\", \"miss\", \"correct rejection\", \"false alarm\"\n",
    " \n",
    "Event table modification for custom code tagging\n",
    " * **non-local** (across-phase) response-contingent tags \n",
    " * separate codemaps and event tables are constructed for the study and test phases\n",
    " * DM analysis: align the study phase items with subsequent test phase \"hit\", \"miss\" responses\n",
    " * Memory x preference: align the test phase items with previous study phase \"like\", \"dislike\" responses\n",
    " \n",
    " \n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "from pathlib import Path\n",
    "import re\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from matplotlib import pyplot as plt\n",
    "\n",
    "from mkpy import mkh5\n",
    "from spudtr import epf\n",
    "\n",
    "# path wrangling for nbsphinx\n",
    "if \"MDE_HOME\" in os.environ.keys():\n",
    "    MDE_HOME = Path(os.environ[\"MDE_HOME\"])\n",
    "else:\n",
    "    from conf import MDE_HOME as MDE_HOME"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%%bash\n",
    "conda list | egrep \"(mkpy|spudtr)\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# set filenames\n",
    "crw = MDE_HOME / \"mkdig/sub000pm.crw\"    # EEG recording\n",
    "log = MDE_HOME / \"mkdig/sub000pm.x.log\"  # events \n",
    "yhdr = MDE_HOME / \"mkpy/sub000pm.yhdr\"   # extra header info\n",
    "\n",
    "# set calibration data filenames\n",
    "cals_crw = MDE_HOME / \"mkdig/sub000c.crw\"\n",
    "cals_log = MDE_HOME / \"mkdig/sub000c.x.log\"\n",
    "cals_yhdr = MDE_HOME / \"mkpy/sub000c.yhdr\"\n",
    "\n",
    "# HDF5 file with EEG recording, events, and header\n",
    "pm_h5_f = MDE_HOME / \"data/sub000pm.h5\"  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**mkh5**  EEG data, event code log, header information"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/turbach/miniconda3/envs/mkconda_for_sphinxdocs/lib/python3.6/site-packages/mkpy/mkh5.py:3706: UserWarning: negative event code(s) found for cal condition code 0 -16384\n",
      "  warnings.warn(msg)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found cals in /sub000/dblock_3\n",
      "Calibrating block /sub000/dblock_0 of 4: (95232,)  \n",
      "Calibrating block /sub000/dblock_1 of 4: (34048,)  \n",
      "Calibrating block /sub000/dblock_2 of 4: (139008,)  \n",
      "Calibrating block /sub000/dblock_3 of 4: (28416,)  \n"
     ]
    }
   ],
   "source": [
    "# convert to HDF5\n",
    "pm_h5 = mkh5.mkh5(pm_h5_f)\n",
    "pm_h5.reset_all()\n",
    "pm_h5.create_mkdata(\"sub000\", crw, log, yhdr)\n",
    "\n",
    "# add calibration data\n",
    "pm_h5.append_mkdata(\"sub000\", cals_crw, cals_log, cals_yhdr)\n",
    "\n",
    "# calibrate\n",
    "pts, pulse, lo, hi, ccode = 5, 10, -40, 40, 0\n",
    "pm_h5.calibrate_mkdata(\n",
    "    \"sub000\",  # data group to calibrate with these cal pulses\n",
    "    n_points=pts,  # pts to average\n",
    "    cal_size=pulse,  # uV\n",
    "    lo_cursor=lo,  # lo_cursor ms\n",
    "    hi_cursor=hi,  # hi_cursor ms\n",
    "    cal_ccode=ccode,  # condition code\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**codemaps: study and test phase** generated programmatically from a table of item information"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**item information**\n",
    "\n",
    "Begin with the item-specific information, gathered somehow.\n",
    "\n",
    "Here `awk` extracts a flat text file directly from the actual stimulus presentation files. \n",
    "\n",
    "*condition_id* tracks animacy and *item_id* tracks the item. \n",
    "\n",
    "*jpg* is the image file prefix for human readability and *scn* file tracks the version of the stimulus presentation file which counterbalance the 50 study items so of the 100 test items, across subjects, each individual picture appears equally often as previously presented or not. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "study phase head\n",
      "ccode  phase  condition_id  item_id  jpg       scn\n",
      "2      study  2             154      necklace  studyp1\n",
      "2      study  2             107      bell      studyp1\n",
      "2      study  1             146      leopard   studyp1\n",
      "2      study  1             157      peas      studyp1\n",
      "2      study  2             151      moon      studyp1\n",
      "2      study  2             143      jacket    studyp1\n",
      "2      study  2             147      lighter   studyp1\n",
      "2      study  2             141      htarblon  studyp1\n",
      "2      study  2             149      lock      studyp1\n",
      "\n",
      "test phase tail\n",
      "1      test   1             144      kilerwal  testp4\n",
      "1      test   2             187      table     testp4\n",
      "1      test   4             111      briefcas  testp4\n",
      "1      test   4             197      whistle   testp4\n",
      "1      test   4             200      wrench    testp4\n",
      "1      test   4             152      motrcyle  testp4\n",
      "1      test   2             120      chair     testp4\n",
      "1      test   3             186      swan      testp4\n",
      "1      test   4             167      refridge  testp4\n",
      "1      test   2             194      vacuum    testp4\n"
     ]
    }
   ],
   "source": [
    "%%bash\n",
    "\n",
    "awk -f ${MDE_HOME}/mkpy/get_pictmem_items.awk ${MDE_HOME}/mkstim/pictmem/*.scn > ${MDE_HOME}/mkpy/pm_item_id_by_scn.tsv\n",
    "\n",
    "echo \"study phase head\"\n",
    "column -t ${MDE_HOME}/mkpy/pm_item_id_by_scn.tsv | head\n",
    "echo\n",
    "\n",
    "echo \"test phase tail\"\n",
    "column -t ${MDE_HOME}/mkpy/pm_item_id_by_scn.tsv | tail"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ccode</th>\n",
       "      <th>phase</th>\n",
       "      <th>condition_id</th>\n",
       "      <th>item_id</th>\n",
       "      <th>jpg</th>\n",
       "      <th>scn</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>study</td>\n",
       "      <td>2</td>\n",
       "      <td>154</td>\n",
       "      <td>necklace</td>\n",
       "      <td>studyp1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>study</td>\n",
       "      <td>2</td>\n",
       "      <td>107</td>\n",
       "      <td>bell</td>\n",
       "      <td>studyp1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>study</td>\n",
       "      <td>1</td>\n",
       "      <td>146</td>\n",
       "      <td>leopard</td>\n",
       "      <td>studyp1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2</td>\n",
       "      <td>study</td>\n",
       "      <td>1</td>\n",
       "      <td>157</td>\n",
       "      <td>peas</td>\n",
       "      <td>studyp1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2</td>\n",
       "      <td>study</td>\n",
       "      <td>2</td>\n",
       "      <td>151</td>\n",
       "      <td>moon</td>\n",
       "      <td>studyp1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   ccode  phase  condition_id  item_id       jpg      scn\n",
       "0      2  study             2      154  necklace  studyp1\n",
       "1      2  study             2      107      bell  studyp1\n",
       "2      2  study             1      146   leopard  studyp1\n",
       "3      2  study             1      157      peas  studyp1\n",
       "4      2  study             2      151      moon  studyp1"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ccode</th>\n",
       "      <th>phase</th>\n",
       "      <th>condition_id</th>\n",
       "      <th>item_id</th>\n",
       "      <th>jpg</th>\n",
       "      <th>scn</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>295</th>\n",
       "      <td>1</td>\n",
       "      <td>test</td>\n",
       "      <td>4</td>\n",
       "      <td>198</td>\n",
       "      <td>wineglas</td>\n",
       "      <td>testp1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>296</th>\n",
       "      <td>1</td>\n",
       "      <td>test</td>\n",
       "      <td>4</td>\n",
       "      <td>125</td>\n",
       "      <td>crayon</td>\n",
       "      <td>testp1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>297</th>\n",
       "      <td>1</td>\n",
       "      <td>test</td>\n",
       "      <td>3</td>\n",
       "      <td>175</td>\n",
       "      <td>sheep</td>\n",
       "      <td>testp1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>298</th>\n",
       "      <td>1</td>\n",
       "      <td>test</td>\n",
       "      <td>4</td>\n",
       "      <td>184</td>\n",
       "      <td>stove</td>\n",
       "      <td>testp1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>299</th>\n",
       "      <td>1</td>\n",
       "      <td>test</td>\n",
       "      <td>2</td>\n",
       "      <td>105</td>\n",
       "      <td>barn</td>\n",
       "      <td>testp1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     ccode phase  condition_id  item_id       jpg     scn\n",
       "295      1  test             4      198  wineglas  testp1\n",
       "296      1  test             4      125    crayon  testp1\n",
       "297      1  test             3      175     sheep  testp1\n",
       "298      1  test             4      184     stove  testp1\n",
       "299      1  test             2      105      barn  testp1"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# read the item information table\n",
    "pm_items = pd.read_csv(\n",
    "    MDE_HOME / \"mkpy/pm_item_id_by_scn.tsv\",\n",
    "    delim_whitespace=True\n",
    ").query(\"scn in ['studyp1', 'testp1']\")\n",
    "\n",
    "display(pm_items.head())\n",
    "display(pm_items.tail())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**study phase codemap**\n",
    "\n",
    "* define a *code pattern: tags* template\n",
    "* plug in the individual items\n",
    "* save the result\n",
    "\n",
    "Note that many-to-many mapping. Many codes (1, 2) are mapped to many tags, e.g., \"like\", \"dislike\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(702, 10)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>regexp</th>\n",
       "      <th>study_bin_id</th>\n",
       "      <th>animacy</th>\n",
       "      <th>study_response</th>\n",
       "      <th>ccode</th>\n",
       "      <th>phase</th>\n",
       "      <th>condition_id</th>\n",
       "      <th>item_id</th>\n",
       "      <th>jpg</th>\n",
       "      <th>scn</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>(#[1234])</td>\n",
       "      <td>0</td>\n",
       "      <td>cal</td>\n",
       "      <td>cal</td>\n",
       "      <td>0</td>\n",
       "      <td>study</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "      <td>cal</td>\n",
       "      <td>cal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>(#[12])</td>\n",
       "      <td>200</td>\n",
       "      <td>_any</td>\n",
       "      <td>_any</td>\n",
       "      <td>2</td>\n",
       "      <td>study</td>\n",
       "      <td>2</td>\n",
       "      <td>-1</td>\n",
       "      <td>_any</td>\n",
       "      <td>_any</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>(#[1]) 8 (154) 1040</td>\n",
       "      <td>2100</td>\n",
       "      <td>animate</td>\n",
       "      <td>like</td>\n",
       "      <td>2</td>\n",
       "      <td>study</td>\n",
       "      <td>2</td>\n",
       "      <td>154</td>\n",
       "      <td>necklace</td>\n",
       "      <td>studyp1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>(#[1]) 8 1040 (154)</td>\n",
       "      <td>2101</td>\n",
       "      <td>animate</td>\n",
       "      <td>like</td>\n",
       "      <td>2</td>\n",
       "      <td>study</td>\n",
       "      <td>2</td>\n",
       "      <td>154</td>\n",
       "      <td>necklace</td>\n",
       "      <td>studyp1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>(#[1]) 1040 8 (154)</td>\n",
       "      <td>2102</td>\n",
       "      <td>animate</td>\n",
       "      <td>like</td>\n",
       "      <td>2</td>\n",
       "      <td>study</td>\n",
       "      <td>2</td>\n",
       "      <td>154</td>\n",
       "      <td>necklace</td>\n",
       "      <td>studyp1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>697</th>\n",
       "      <td>(#[2]) 1040 8 (159)</td>\n",
       "      <td>2202</td>\n",
       "      <td>inanimate</td>\n",
       "      <td>like</td>\n",
       "      <td>2</td>\n",
       "      <td>study</td>\n",
       "      <td>2</td>\n",
       "      <td>159</td>\n",
       "      <td>pen</td>\n",
       "      <td>studyp1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>698</th>\n",
       "      <td>(#[2]) 8 (159) 2064</td>\n",
       "      <td>2210</td>\n",
       "      <td>inanimate</td>\n",
       "      <td>dislike</td>\n",
       "      <td>2</td>\n",
       "      <td>study</td>\n",
       "      <td>2</td>\n",
       "      <td>159</td>\n",
       "      <td>pen</td>\n",
       "      <td>studyp1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>699</th>\n",
       "      <td>(#[2]) 8 2064 (159)</td>\n",
       "      <td>2211</td>\n",
       "      <td>inanimate</td>\n",
       "      <td>dislike</td>\n",
       "      <td>2</td>\n",
       "      <td>study</td>\n",
       "      <td>2</td>\n",
       "      <td>159</td>\n",
       "      <td>pen</td>\n",
       "      <td>studyp1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>700</th>\n",
       "      <td>(#[2]) 2064 8 (159)</td>\n",
       "      <td>2212</td>\n",
       "      <td>inanimate</td>\n",
       "      <td>dislike</td>\n",
       "      <td>2</td>\n",
       "      <td>study</td>\n",
       "      <td>2</td>\n",
       "      <td>159</td>\n",
       "      <td>pen</td>\n",
       "      <td>studyp1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>701</th>\n",
       "      <td>(#[2]) 8 (159) (?!(1040|2064))</td>\n",
       "      <td>2203</td>\n",
       "      <td>inanimate</td>\n",
       "      <td>no_response</td>\n",
       "      <td>2</td>\n",
       "      <td>study</td>\n",
       "      <td>2</td>\n",
       "      <td>159</td>\n",
       "      <td>pen</td>\n",
       "      <td>studyp1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>702 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                             regexp study_bin_id    animacy study_response  \\\n",
       "0                         (#[1234])            0        cal            cal   \n",
       "1                           (#[12])          200       _any           _any   \n",
       "2               (#[1]) 8 (154) 1040         2100    animate           like   \n",
       "3               (#[1]) 8 1040 (154)         2101    animate           like   \n",
       "4               (#[1]) 1040 8 (154)         2102    animate           like   \n",
       "..                              ...          ...        ...            ...   \n",
       "697             (#[2]) 1040 8 (159)         2202  inanimate           like   \n",
       "698             (#[2]) 8 (159) 2064         2210  inanimate        dislike   \n",
       "699             (#[2]) 8 2064 (159)         2211  inanimate        dislike   \n",
       "700             (#[2]) 2064 8 (159)         2212  inanimate        dislike   \n",
       "701  (#[2]) 8 (159) (?!(1040|2064))         2203  inanimate    no_response   \n",
       "\n",
       "    ccode  phase condition_id item_id       jpg      scn  \n",
       "0       0  study            0      -1       cal      cal  \n",
       "1       2  study            2      -1      _any     _any  \n",
       "2       2  study            2     154  necklace  studyp1  \n",
       "3       2  study            2     154  necklace  studyp1  \n",
       "4       2  study            2     154  necklace  studyp1  \n",
       "..    ...    ...          ...     ...       ...      ...  \n",
       "697     2  study            2     159       pen  studyp1  \n",
       "698     2  study            2     159       pen  studyp1  \n",
       "699     2  study            2     159       pen  studyp1  \n",
       "700     2  study            2     159       pen  studyp1  \n",
       "701     2  study            2     159       pen  studyp1  \n",
       "\n",
       "[702 rows x 10 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# study phase codemape file name\n",
    "pm_study_codemap_f = MDE_HOME / \"mkpy/pm_study_codemap.tsv\"\n",
    "\n",
    "pm_study_codemap_cols = [\"regexp\", \"study_bin_id\", \"animacy\", \"study_response\", ] + list(pm_items.columns)\n",
    "\n",
    "# stimulus-response tag template as a Python dictionary \n",
    "# The key:val pair says \"this code sequence gets these tags\"\n",
    "# The ITEM_ID string will be replaced by the actual 3-digit item number\n",
    "\n",
    "study_code_tags = {\n",
    "    \"(#[12]) 8 (ITEM_ID) 1040\": (2000, \"like\"),\n",
    "    \"(#[12]) 8 1040 (ITEM_ID)\": (2001, \"like\"),\n",
    "    \"(#[12]) 1040 8 (ITEM_ID)\": (2002, \"like\"),\n",
    " \n",
    "    \"(#[12]) 8 (ITEM_ID) 2064\": (2100, \"dislike\"),\n",
    "    \"(#[12]) 8 2064 (ITEM_ID)\": (2101, \"dislike\"),\n",
    "    \"(#[12]) 2064 8 (ITEM_ID)\": (2102, \"dislike\"),\n",
    "    \n",
    "    \"(#[12]) 8 (ITEM_ID) (?!(1040|2064))\": (2003, \"no_response\"),\n",
    "}\n",
    "\n",
    "# the new 4-digit \"study_bin_id\" tag re-codes the match event 1 or 2 with more information\n",
    "#\n",
    "#  phase animacy response response_timing\n",
    "#    phase: study=2\n",
    "#    animacy: 1=animate, 2=inanimate\n",
    "#    response(0=like, 1=dislike)\n",
    "#    response timing: 0=prompted,1,2 anticipation, 3=no response)\n",
    "#\n",
    "study_code_tags = {\n",
    "    # animate\n",
    "    \"(#[1]) 8 (ITEM_ID) 1040\": (2100, \"animate\", \"like\"),\n",
    "    \"(#[1]) 8 1040 (ITEM_ID)\": (2101, \"animate\", \"like\"),\n",
    "    \"(#[1]) 1040 8 (ITEM_ID)\": (2102, \"animate\", \"like\"),\n",
    " \n",
    "    \"(#[1]) 8 (ITEM_ID) 2064\": (2110, \"animate\", \"dislike\"),\n",
    "    \"(#[1]) 8 2064 (ITEM_ID)\": (2111, \"animate\", \"dislike\"),\n",
    "    \"(#[1]) 2064 8 (ITEM_ID)\": (2112, \"animate\", \"dislike\"),\n",
    "    \n",
    "    \"(#[1]) 8 (ITEM_ID) (?!(1040|2064))\": (2103, \"animate\", \"no_response\"),\n",
    "\n",
    "    # inanimate\n",
    "    \"(#[2]) 8 (ITEM_ID) 1040\": (2200, \"inanimate\", \"like\"),\n",
    "    \"(#[2]) 8 1040 (ITEM_ID)\": (2201, \"inanimate\", \"like\"),\n",
    "    \"(#[2]) 1040 8 (ITEM_ID)\": (2202, \"inanimate\", \"like\"),\n",
    " \n",
    "    \"(#[2]) 8 (ITEM_ID) 2064\": (2210, \"inanimate\", \"dislike\"),\n",
    "    \"(#[2]) 8 2064 (ITEM_ID)\": (2211, \"inanimate\", \"dislike\"),\n",
    "    \"(#[2]) 2064 8 (ITEM_ID)\": (2212, \"inanimate\", \"dislike\"),\n",
    "    \n",
    "    \"(#[2]) 8 (ITEM_ID) (?!(1040|2064))\": (2203, \"inanimate\", \"no_response\"),\n",
    "\n",
    "}\n",
    "\n",
    "#\n",
    "# Build a list of codemap lines. \n",
    "\n",
    "# The first line says *any* code matching 1 or 2 gets the tags 200, \"_any\", 2, ... etc.\n",
    "# This tags all matching stimulus events, it is not contingent the response.\n",
    "# It is not necessary but it is useful here, we will see why shortly.\n",
    "study_code_map = [\n",
    "    (\"(#[1234])\", 0, \"cal\",  \"cal\",  0, \"study\", 0, -1, \"cal\", \"cal\"),\n",
    "    (\"(#[12])\", 200, \"_any\", \"_any\", 2, \"study\", 2, -1, \"_any\", \"_any\")\n",
    "]\n",
    "\n",
    "# plug each row of the pictmem item info into the template and append the\n",
    "# result to the list of codemap lines\n",
    "for idx, row in pm_items.query(\"phase == 'study'\").iterrows():\n",
    "    for pattern, tags in study_code_tags.items():\n",
    "        code_tags = (\n",
    "            pattern.replace(\"ITEM_ID\", str(row.item_id)),  # current item number goes in the template\n",
    "            *(str(t) for t in tags),\n",
    "            *(str(c) for c in row)   # this adds the rest of the item to the tags\n",
    "        )\n",
    "        study_code_map.append(code_tags)\n",
    "\n",
    "\n",
    "# convert the list of lines to a pandas.DataFrame and save as a tab separated text file\n",
    "pm_study_codemap = pd.DataFrame(\n",
    "    study_code_map,\n",
    "    columns=pm_study_codemap_cols\n",
    ")\n",
    "pm_study_codemap.to_csv(pm_study_codemap_f, sep=\"\\t\", index=False)\n",
    "\n",
    "display(pm_study_codemap.shape)\n",
    "display(pm_study_codemap)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**1. study phase get_event_table(*codemap*)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "searching codes in: sub000/dblock_0\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/turbach/miniconda3/envs/mkconda_for_sphinxdocs/lib/python3.6/site-packages/mkpy/mkh5.py:1060: UserWarning: \n",
      "As of mkpy 0.2.0 to match events with a codemap regexp pattern, the\n",
      "ccode column in pm_study_codemap.tsv must also match the log_ccode\n",
      "in the datablock. If this behavior is not desired, delete or rename\n",
      "the ccode column in the codemap.\n",
      "  warnings.warn(msg)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "searching codes in: sub000/dblock_1\n",
      "searching codes in: sub000/dblock_2\n",
      "searching codes in: sub000/dblock_3\n"
     ]
    }
   ],
   "source": [
    "pm_study_event_table = pm_h5.get_event_table(pm_study_codemap_f)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**inspect the study phase event table**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "study phase (shape): (359, 33)\n",
      "study phase columns: ['data_group', 'dblock_path', 'dblock_tick_idx', 'dblock_ticks', 'crw_ticks', 'raw_evcodes', 'log_evcodes', 'log_ccodes', 'log_flags', 'epoch_match_tick_delta', 'epoch_ticks', 'dblock_srate', 'match_group', 'idx', 'dlim', 'anchor_str', 'match_str', 'anchor_code', 'match_code', 'anchor_tick', 'match_tick', 'anchor_tick_delta', 'is_anchor', 'regexp', 'study_bin_id', 'animacy', 'study_response', 'ccode', 'phase', 'condition_id', 'item_id', 'jpg', 'scn']\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>dblock_path</th>\n",
       "      <th>dblock_ticks</th>\n",
       "      <th>log_evcodes</th>\n",
       "      <th>log_ccodes</th>\n",
       "      <th>log_flags</th>\n",
       "      <th>regexp</th>\n",
       "      <th>match_code</th>\n",
       "      <th>phase</th>\n",
       "      <th>study_bin_id</th>\n",
       "      <th>study_response</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>100</th>\n",
       "      <td>sub000/dblock_0</td>\n",
       "      <td>834</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>32</td>\n",
       "      <td>(#[2]) 8 (154) 1040</td>\n",
       "      <td>2</td>\n",
       "      <td>study</td>\n",
       "      <td>2200</td>\n",
       "      <td>like</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>101</th>\n",
       "      <td>sub000/dblock_0</td>\n",
       "      <td>1410</td>\n",
       "      <td>154</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>(#[2]) 8 (154) 1040</td>\n",
       "      <td>154</td>\n",
       "      <td>study</td>\n",
       "      <td>2200</td>\n",
       "      <td>like</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>102</th>\n",
       "      <td>sub000/dblock_0</td>\n",
       "      <td>3390</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>(#[2]) 8 (107) 1040</td>\n",
       "      <td>2</td>\n",
       "      <td>study</td>\n",
       "      <td>2200</td>\n",
       "      <td>like</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>103</th>\n",
       "      <td>sub000/dblock_0</td>\n",
       "      <td>3969</td>\n",
       "      <td>107</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>(#[2]) 8 (107) 1040</td>\n",
       "      <td>107</td>\n",
       "      <td>study</td>\n",
       "      <td>2200</td>\n",
       "      <td>like</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>104</th>\n",
       "      <td>sub000/dblock_0</td>\n",
       "      <td>5532</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>(#[1]) 8 (146) 1040</td>\n",
       "      <td>1</td>\n",
       "      <td>study</td>\n",
       "      <td>2100</td>\n",
       "      <td>like</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         dblock_path  dblock_ticks  log_evcodes  log_ccodes  log_flags  \\\n",
       "100  sub000/dblock_0           834            2           2         32   \n",
       "101  sub000/dblock_0          1410          154           2          0   \n",
       "102  sub000/dblock_0          3390            2           2          0   \n",
       "103  sub000/dblock_0          3969          107           2          0   \n",
       "104  sub000/dblock_0          5532            1           2          0   \n",
       "\n",
       "                  regexp  match_code  phase  study_bin_id study_response  \n",
       "100  (#[2]) 8 (154) 1040           2  study          2200           like  \n",
       "101  (#[2]) 8 (154) 1040         154  study          2200           like  \n",
       "102  (#[2]) 8 (107) 1040           2  study          2200           like  \n",
       "103  (#[2]) 8 (107) 1040         107  study          2200           like  \n",
       "104  (#[1]) 8 (146) 1040           1  study          2100           like  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>dblock_path</th>\n",
       "      <th>dblock_ticks</th>\n",
       "      <th>log_evcodes</th>\n",
       "      <th>log_ccodes</th>\n",
       "      <th>log_flags</th>\n",
       "      <th>regexp</th>\n",
       "      <th>match_code</th>\n",
       "      <th>phase</th>\n",
       "      <th>study_bin_id</th>\n",
       "      <th>study_response</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>554</th>\n",
       "      <td>sub000/dblock_3</td>\n",
       "      <td>27315</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>(#[1234])</td>\n",
       "      <td>4</td>\n",
       "      <td>study</td>\n",
       "      <td>0</td>\n",
       "      <td>cal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>555</th>\n",
       "      <td>sub000/dblock_3</td>\n",
       "      <td>27444</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>(#[1234])</td>\n",
       "      <td>2</td>\n",
       "      <td>study</td>\n",
       "      <td>0</td>\n",
       "      <td>cal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>556</th>\n",
       "      <td>sub000/dblock_3</td>\n",
       "      <td>27573</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>(#[1234])</td>\n",
       "      <td>3</td>\n",
       "      <td>study</td>\n",
       "      <td>0</td>\n",
       "      <td>cal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>557</th>\n",
       "      <td>sub000/dblock_3</td>\n",
       "      <td>27703</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>(#[1234])</td>\n",
       "      <td>4</td>\n",
       "      <td>study</td>\n",
       "      <td>0</td>\n",
       "      <td>cal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>558</th>\n",
       "      <td>sub000/dblock_3</td>\n",
       "      <td>27832</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>(#[1234])</td>\n",
       "      <td>2</td>\n",
       "      <td>study</td>\n",
       "      <td>0</td>\n",
       "      <td>cal</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         dblock_path  dblock_ticks  log_evcodes  log_ccodes  log_flags  \\\n",
       "554  sub000/dblock_3         27315            4           0          0   \n",
       "555  sub000/dblock_3         27444            2           0          0   \n",
       "556  sub000/dblock_3         27573            3           0          0   \n",
       "557  sub000/dblock_3         27703            4           0          0   \n",
       "558  sub000/dblock_3         27832            2           0          0   \n",
       "\n",
       "        regexp  match_code  phase  study_bin_id study_response  \n",
       "554  (#[1234])           4  study             0            cal  \n",
       "555  (#[1234])           2  study             0            cal  \n",
       "556  (#[1234])           3  study             0            cal  \n",
       "557  (#[1234])           4  study             0            cal  \n",
       "558  (#[1234])           2  study             0            cal  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "is_anchor:  True\n",
      "(309, 33)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>log_flags</th>\n",
       "      <th>0</th>\n",
       "      <th>32</th>\n",
       "      <th>64</th>\n",
       "      <th>All</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>data_group</th>\n",
       "      <th>ccode</th>\n",
       "      <th>study_bin_id</th>\n",
       "      <th>study_response</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"9\" valign=\"top\">sub000</th>\n",
       "      <th>0</th>\n",
       "      <th>0</th>\n",
       "      <th>cal</th>\n",
       "      <td>208</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>209</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"8\" valign=\"top\">2</th>\n",
       "      <th>200</th>\n",
       "      <th>_any</th>\n",
       "      <td>48</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2100</th>\n",
       "      <th>like</th>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2101</th>\n",
       "      <th>like</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2102</th>\n",
       "      <th>like</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2103</th>\n",
       "      <th>no_response</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2110</th>\n",
       "      <th>dislike</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2200</th>\n",
       "      <th>like</th>\n",
       "      <td>23</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2210</th>\n",
       "      <th>dislike</th>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>All</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <td>304</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>309</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "log_flags                                       0  32  64  All\n",
       "data_group ccode study_bin_id study_response                  \n",
       "sub000     0     0            cal             208   0   1  209\n",
       "           2     200          _any             48   2   0   50\n",
       "                 2100         like              8   1   0    9\n",
       "                 2101         like              1   0   0    1\n",
       "                 2102         like              1   0   0    1\n",
       "                 2103         no_response       1   0   0    1\n",
       "                 2110         dislike           3   0   0    3\n",
       "                 2200         like             23   1   0   24\n",
       "                 2210         dislike          11   0   0   11\n",
       "All                                           304   4   1  309"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "is_anchor:  False\n",
      "(50, 33)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>log_flags</th>\n",
       "      <th>0</th>\n",
       "      <th>All</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>data_group</th>\n",
       "      <th>ccode</th>\n",
       "      <th>study_bin_id</th>\n",
       "      <th>study_response</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"7\" valign=\"top\">sub000</th>\n",
       "      <th rowspan=\"7\" valign=\"top\">2</th>\n",
       "      <th>2100</th>\n",
       "      <th>like</th>\n",
       "      <td>9</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2101</th>\n",
       "      <th>like</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2102</th>\n",
       "      <th>like</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2103</th>\n",
       "      <th>no_response</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2110</th>\n",
       "      <th>dislike</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2200</th>\n",
       "      <th>like</th>\n",
       "      <td>24</td>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2210</th>\n",
       "      <th>dislike</th>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>All</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <td>50</td>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "log_flags                                      0  All\n",
       "data_group ccode study_bin_id study_response         \n",
       "sub000     2     2100         like             9    9\n",
       "                 2101         like             1    1\n",
       "                 2102         like             1    1\n",
       "                 2103         no_response      1    1\n",
       "                 2110         dislike          3    3\n",
       "                 2200         like            24   24\n",
       "                 2210         dislike         11   11\n",
       "All                                           50   50"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(\"study phase (shape):\", pm_study_event_table.shape)\n",
    "print(\"study phase columns:\", pm_study_event_table.columns.to_list())\n",
    "\n",
    "# select some columns to show\n",
    "example_columns = [\n",
    "    \"dblock_path\", \"dblock_ticks\", \"log_evcodes\", \"log_ccodes\", \"log_flags\", \n",
    "    \"regexp\", \"match_code\", \n",
    "    \"phase\", \"study_bin_id\", \"study_response\", \n",
    "]\n",
    "\n",
    "# first few stimulus events, coded for response\n",
    "display(pm_study_event_table[example_columns].query(\"study_bin_id > 2000\").head())\n",
    "\n",
    "for is_anchor in [True, False]:\n",
    "    print(\"is_anchor: \", is_anchor)\n",
    "    events = pm_study_event_table.query(\"is_anchor == @is_anchor \")\n",
    "    print(events.shape)\n",
    "    display(\n",
    "        pd.crosstab(\n",
    "            [\n",
    "                events.data_group,\n",
    "                events.ccode,\n",
    "                events.study_bin_id,\n",
    "                events.study_response\n",
    "            ],\n",
    "            [\n",
    "                events.log_flags\n",
    "            ],\n",
    "            margins=True\n",
    "        )\n",
    "    )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**test phase codemap**\n",
    "\n",
    "* define the template\n",
    "* plug in the individual items\n",
    "* save the result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(706, 12)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>regexp</th>\n",
       "      <th>test_bin_id</th>\n",
       "      <th>animacy</th>\n",
       "      <th>stimulus</th>\n",
       "      <th>test_response</th>\n",
       "      <th>accuracy</th>\n",
       "      <th>ccode</th>\n",
       "      <th>phase</th>\n",
       "      <th>condition_id</th>\n",
       "      <th>item_id</th>\n",
       "      <th>jpg</th>\n",
       "      <th>scn</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>(#[1234])</td>\n",
       "      <td>0</td>\n",
       "      <td>cal</td>\n",
       "      <td>cal</td>\n",
       "      <td>cal</td>\n",
       "      <td>cal</td>\n",
       "      <td>0</td>\n",
       "      <td>test</td>\n",
       "      <td>cal</td>\n",
       "      <td>-1</td>\n",
       "      <td>cal</td>\n",
       "      <td>cal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>(#[1234])</td>\n",
       "      <td>10</td>\n",
       "      <td>_any</td>\n",
       "      <td>_any</td>\n",
       "      <td>_any</td>\n",
       "      <td>_any</td>\n",
       "      <td>1</td>\n",
       "      <td>test</td>\n",
       "      <td>_any</td>\n",
       "      <td>-1</td>\n",
       "      <td>_any</td>\n",
       "      <td>_any</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>(#[1])</td>\n",
       "      <td>11</td>\n",
       "      <td>animate</td>\n",
       "      <td>distractor</td>\n",
       "      <td>_any</td>\n",
       "      <td>_any</td>\n",
       "      <td>1</td>\n",
       "      <td>test</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>_any</td>\n",
       "      <td>_any</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>(#[2])</td>\n",
       "      <td>12</td>\n",
       "      <td>inanimate</td>\n",
       "      <td>distractor</td>\n",
       "      <td>_any</td>\n",
       "      <td>_any</td>\n",
       "      <td>1</td>\n",
       "      <td>test</td>\n",
       "      <td>2</td>\n",
       "      <td>-1</td>\n",
       "      <td>_any</td>\n",
       "      <td>_any</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>(#[3])</td>\n",
       "      <td>13</td>\n",
       "      <td>animate</td>\n",
       "      <td>studied</td>\n",
       "      <td>_any</td>\n",
       "      <td>_any</td>\n",
       "      <td>1</td>\n",
       "      <td>test</td>\n",
       "      <td>3</td>\n",
       "      <td>-1</td>\n",
       "      <td>_any</td>\n",
       "      <td>_any</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>701</th>\n",
       "      <td>(#2) 2064 8 (105)</td>\n",
       "      <td>1202</td>\n",
       "      <td>inanimate</td>\n",
       "      <td>distractor</td>\n",
       "      <td>new</td>\n",
       "      <td>cr</td>\n",
       "      <td>1</td>\n",
       "      <td>test</td>\n",
       "      <td>2</td>\n",
       "      <td>105</td>\n",
       "      <td>barn</td>\n",
       "      <td>testp1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>702</th>\n",
       "      <td>(#2) 8 (105) 1040</td>\n",
       "      <td>1210</td>\n",
       "      <td>inanimate</td>\n",
       "      <td>distractor</td>\n",
       "      <td>old</td>\n",
       "      <td>fa</td>\n",
       "      <td>1</td>\n",
       "      <td>test</td>\n",
       "      <td>2</td>\n",
       "      <td>105</td>\n",
       "      <td>barn</td>\n",
       "      <td>testp1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>703</th>\n",
       "      <td>(#2) 8 1040 (105)</td>\n",
       "      <td>1211</td>\n",
       "      <td>inanimate</td>\n",
       "      <td>distractor</td>\n",
       "      <td>old</td>\n",
       "      <td>fa</td>\n",
       "      <td>1</td>\n",
       "      <td>test</td>\n",
       "      <td>2</td>\n",
       "      <td>105</td>\n",
       "      <td>barn</td>\n",
       "      <td>testp1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>704</th>\n",
       "      <td>(#2) 1040 8 (105)</td>\n",
       "      <td>1212</td>\n",
       "      <td>inanimate</td>\n",
       "      <td>distractor</td>\n",
       "      <td>old</td>\n",
       "      <td>fa</td>\n",
       "      <td>1</td>\n",
       "      <td>test</td>\n",
       "      <td>2</td>\n",
       "      <td>105</td>\n",
       "      <td>barn</td>\n",
       "      <td>testp1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>705</th>\n",
       "      <td>(#2) 8 (105) (?!(2064|1040))</td>\n",
       "      <td>1203</td>\n",
       "      <td>inanimate</td>\n",
       "      <td>distractor</td>\n",
       "      <td>none</td>\n",
       "      <td>nr</td>\n",
       "      <td>1</td>\n",
       "      <td>test</td>\n",
       "      <td>2</td>\n",
       "      <td>105</td>\n",
       "      <td>barn</td>\n",
       "      <td>testp1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>706 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                           regexp  test_bin_id    animacy    stimulus  \\\n",
       "0                       (#[1234])            0        cal         cal   \n",
       "1                       (#[1234])           10       _any        _any   \n",
       "2                          (#[1])           11    animate  distractor   \n",
       "3                          (#[2])           12  inanimate  distractor   \n",
       "4                          (#[3])           13    animate     studied   \n",
       "..                            ...          ...        ...         ...   \n",
       "701             (#2) 2064 8 (105)         1202  inanimate  distractor   \n",
       "702             (#2) 8 (105) 1040         1210  inanimate  distractor   \n",
       "703             (#2) 8 1040 (105)         1211  inanimate  distractor   \n",
       "704             (#2) 1040 8 (105)         1212  inanimate  distractor   \n",
       "705  (#2) 8 (105) (?!(2064|1040))         1203  inanimate  distractor   \n",
       "\n",
       "    test_response accuracy ccode phase condition_id item_id   jpg     scn  \n",
       "0             cal      cal     0  test          cal      -1   cal     cal  \n",
       "1            _any     _any     1  test         _any      -1  _any    _any  \n",
       "2            _any     _any     1  test            1      -1  _any    _any  \n",
       "3            _any     _any     1  test            2      -1  _any    _any  \n",
       "4            _any     _any     1  test            3      -1  _any    _any  \n",
       "..            ...      ...   ...   ...          ...     ...   ...     ...  \n",
       "701           new       cr     1  test            2     105  barn  testp1  \n",
       "702           old       fa     1  test            2     105  barn  testp1  \n",
       "703           old       fa     1  test            2     105  barn  testp1  \n",
       "704           old       fa     1  test            2     105  barn  testp1  \n",
       "705          none       nr     1  test            2     105  barn  testp1  \n",
       "\n",
       "[706 rows x 12 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# test phase codemap name\n",
    "pm_test_codemap_f = MDE_HOME / \"mkpy/pm_codemap.tsv\"\n",
    "\n",
    "# test phase codemap column names\n",
    "pm_test_codemap_cols = [\n",
    "    \"regexp\", \"test_bin_id\", \"animacy\", \"stimulus\", \"test_response\", \"accuracy\"\n",
    "] + list(pm_items.columns)\n",
    "\n",
    "\n",
    "# test phase template: stimulus, old/new response (include pre-prompt anticipations)\n",
    "test_code_tags = {\n",
    "    # new stim animate\n",
    "    \"(#1) 8 (ITEM_ID) 2064\": (1100, \"animate\", \"distractor\", \"new\", \"cr\"),\n",
    "    \"(#1) 8 2064 (ITEM_ID)\": (1101, \"animate\", \"distractor\", \"new\", \"cr\"),\n",
    "    \"(#1) 2064 8 (ITEM_ID)\": (1102, \"animate\", \"distractor\", \"new\", \"cr\"),\n",
    "\n",
    "    \"(#1) 8 (ITEM_ID) 1040\": (1110, \"animate\", \"distractor\", \"old\", \"fa\"),\n",
    "    \"(#1) 8 1040 (ITEM_ID)\": (1111, \"animate\", \"distractor\", \"old\", \"fa\"),\n",
    "    \"(#1) 1040 8 (ITEM_ID)\": (1112, \"animate\", \"distractor\", \"old\", \"fa\"),\n",
    "\n",
    "    \"(#1) 8 (ITEM_ID) (?!(2064|1040))\": (1103, \"animate\", \"distractor\", \"none\", \"nr\"),\n",
    "\n",
    "    # new stim inanimate\n",
    "    \"(#2) 8 (ITEM_ID) 2064\": (1200, \"inanimate\", \"distractor\", \"new\", \"cr\"),\n",
    "    \"(#2) 8 2064 (ITEM_ID)\": (1201, \"inanimate\", \"distractor\", \"new\", \"cr\"),\n",
    "    \"(#2) 2064 8 (ITEM_ID)\": (1202, \"inanimate\", \"distractor\", \"new\", \"cr\"),\n",
    "\n",
    "    \"(#2) 8 (ITEM_ID) 1040\": (1210, \"inanimate\", \"distractor\", \"old\", \"fa\"),\n",
    "    \"(#2) 8 1040 (ITEM_ID)\": (1211, \"inanimate\", \"distractor\", \"old\", \"fa\"),\n",
    "    \"(#2) 1040 8 (ITEM_ID)\": (1212, \"inanimate\", \"distractor\", \"old\", \"fa\"),\n",
    "\n",
    "    \"(#2) 8 (ITEM_ID) (?!(2064|1040))\": (1203, \"inanimate\", \"distractor\", \"none\", \"nr\"),\n",
    "\n",
    "    # old stim animate\n",
    "    \"(#3) 8 (ITEM_ID) 1040\": (1300, \"animate\", \"studied\", \"old\", \"hit\"),\n",
    "    \"(#3) 8 1040 (ITEM_ID)\": (1301, \"animate\", \"studied\", \"old\", \"hit\"),\n",
    "    \"(#3) 1040 8 (ITEM_ID)\": (1302, \"animate\", \"studied\", \"old\", \"hit\"),\n",
    "\n",
    "    \"(#3) 8 (ITEM_ID) 2064\": (1310, \"animate\", \"studied\", \"new\", \"miss\"),\n",
    "    \"(#3) 8 2064 (ITEM_ID)\": (1311, \"animate\", \"studied\", \"new\", \"miss\"),\n",
    "    \"(#3) 2064 8 (ITEM_ID)\": (1312, \"animate\", \"studied\", \"new\", \"miss\"),\n",
    "\n",
    "    \"(#3) 8 (ITEM_ID) (?!(2064|1040))\": (1303, \"animate\", \"studied\", \"none\", \"nr\"),\n",
    "\n",
    "    # old stim inanimate\n",
    "    \"(#4) 8 (ITEM_ID) 1040\": (1400, \"inanimate\", \"studied\", \"old\", \"hit\"),\n",
    "    \"(#4) 8 1040 (ITEM_ID)\": (1401, \"inanimate\", \"studied\", \"old\", \"hit\"),\n",
    "    \"(#4) 1040 8 (ITEM_ID)\": (1402, \"inanimate\", \"studied\", \"old\", \"hit\"),\n",
    "\n",
    "    \"(#4) 8 (ITEM_ID) 2064\": (1410, \"inanimate\", \"studied\", \"new\", \"miss\"),\n",
    "    \"(#4) 8 2064 (ITEM_ID)\": (1411, \"inanimate\", \"studied\", \"new\", \"miss\"),\n",
    "    \"(#4) 2064 8 (ITEM_ID)\": (1412, \"inanimate\", \"studied\", \"new\", \"miss\"),\n",
    "\n",
    "    \"(#4) 8 (ITEM_ID) (?!(2064|1040))\": (1403, \"inanimate\", \"studied\", \"none\", \"nr\"),\n",
    "\n",
    "}\n",
    "\n",
    "# initialize the code map to tag stimulus codes, not response contingent\n",
    "test_code_map = [\n",
    "    (\"(#[1234])\",  0, \"cal\",   \"cal\",  \"cal\",  \"cal\", 0, \"test\", \"cal\", \"-1\", \"cal\", \"cal\"),\n",
    "    (\"(#[1234])\", 10, \"_any\", \"_any\", \"_any\", \"_any\", 1, \"test\", \"_any\", \"-1\", \"_any\", \"_any\"),\n",
    "    (\"(#[1])\", 11, \"animate\", \"distractor\", \"_any\", \"_any\", 1, \"test\", 1, \"-1\", \"_any\", \"_any\"),\n",
    "    (\"(#[2])\", 12, \"inanimate\", \"distractor\", \"_any\", \"_any\", 1, \"test\", 2, \"-1\", \"_any\", \"_any\"),\n",
    "    (\"(#[3])\", 13, \"animate\", \"studied\", \"_any\", \"_any\", 1, \"test\", 3, \"-1\", \"_any\", \"_any\"),\n",
    "    (\"(#[4])\", 14, \"inanimate\", \"studied\", \"_any\", \"_any\", 1, \"test\", 4, \"-1\", \"_any\", \"_any\")\n",
    "]\n",
    "\n",
    "# iterate through the item info and plug the item number into the template lines\n",
    "for idx, row in pm_items.query(\"phase == 'test'\").iterrows():\n",
    "    for pattern, tags in test_code_tags.items():\n",
    "        # condition_id is 1, 2, 3, or 4 only plug into the relevant template lines.\n",
    "        if re.match(r\"^\\(#\" + str(row.condition_id), pattern):\n",
    "            code_tags = (\n",
    "                pattern.replace(\"ITEM_ID\", str(row.item_id)),\n",
    "                tags[0],\n",
    "                *(str(t) for t in tags[1:]),\n",
    "                *(str(c) for c in row)\n",
    "            )\n",
    "            test_code_map.append(code_tags)\n",
    "            \n",
    "pm_test_codemap = pd.DataFrame(\n",
    "    test_code_map,\n",
    "    columns=pm_test_codemap_cols\n",
    ")\n",
    "\n",
    "# write test demo phase codemap\n",
    "pm_test_codemap.to_csv(pm_test_codemap_f, sep=\"\\t\", index=False)\n",
    "\n",
    "display(pm_test_codemap.shape)\n",
    "display(pm_test_codemap)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**test phase get_event_table(*codemap*)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/turbach/miniconda3/envs/mkconda_for_sphinxdocs/lib/python3.6/site-packages/mkpy/mkh5.py:1060: UserWarning: \n",
      "As of mkpy 0.2.0 to match events with a codemap regexp pattern, the\n",
      "ccode column in pm_codemap.tsv must also match the log_ccode\n",
      "in the datablock. If this behavior is not desired, delete or rename\n",
      "the ccode column in the codemap.\n",
      "  warnings.warn(msg)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "searching codes in: sub000/dblock_0\n",
      "searching codes in: sub000/dblock_1\n",
      "searching codes in: sub000/dblock_2\n",
      "searching codes in: sub000/dblock_3\n"
     ]
    }
   ],
   "source": [
    "pm_test_event_table = pm_h5.get_event_table(pm_test_codemap_f)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**inspect test phase event table**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "test phase (shape): (609, 35)\n",
      "test phase columns: Index(['data_group', 'dblock_path', 'dblock_tick_idx', 'dblock_ticks',\n",
      "       'crw_ticks', 'raw_evcodes', 'log_evcodes', 'log_ccodes', 'log_flags',\n",
      "       'epoch_match_tick_delta', 'epoch_ticks', 'dblock_srate', 'match_group',\n",
      "       'idx', 'dlim', 'anchor_str', 'match_str', 'anchor_code', 'match_code',\n",
      "       'anchor_tick', 'match_tick', 'anchor_tick_delta', 'is_anchor', 'regexp',\n",
      "       'test_bin_id', 'animacy', 'stimulus', 'test_response', 'accuracy',\n",
      "       'ccode', 'phase', 'condition_id', 'item_id', 'jpg', 'scn'],\n",
      "      dtype='object')\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>dblock_path</th>\n",
       "      <th>dblock_ticks</th>\n",
       "      <th>log_evcodes</th>\n",
       "      <th>log_ccodes</th>\n",
       "      <th>log_flags</th>\n",
       "      <th>regexp</th>\n",
       "      <th>match_code</th>\n",
       "      <th>phase</th>\n",
       "      <th>test_bin_id</th>\n",
       "      <th>test_response</th>\n",
       "      <th>accuracy</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>204</th>\n",
       "      <td>sub000/dblock_1</td>\n",
       "      <td>611</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>(#1) 2064 8 (127)</td>\n",
       "      <td>1</td>\n",
       "      <td>test</td>\n",
       "      <td>1102</td>\n",
       "      <td>new</td>\n",
       "      <td>cr</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>205</th>\n",
       "      <td>sub000/dblock_1</td>\n",
       "      <td>1061</td>\n",
       "      <td>127</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>(#1) 2064 8 (127)</td>\n",
       "      <td>127</td>\n",
       "      <td>test</td>\n",
       "      <td>1102</td>\n",
       "      <td>new</td>\n",
       "      <td>cr</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>206</th>\n",
       "      <td>sub000/dblock_1</td>\n",
       "      <td>2062</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>32</td>\n",
       "      <td>(#4) 8 (129) 1040</td>\n",
       "      <td>4</td>\n",
       "      <td>test</td>\n",
       "      <td>1400</td>\n",
       "      <td>old</td>\n",
       "      <td>hit</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>207</th>\n",
       "      <td>sub000/dblock_1</td>\n",
       "      <td>2516</td>\n",
       "      <td>129</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>(#4) 8 (129) 1040</td>\n",
       "      <td>129</td>\n",
       "      <td>test</td>\n",
       "      <td>1400</td>\n",
       "      <td>old</td>\n",
       "      <td>hit</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>208</th>\n",
       "      <td>sub000/dblock_1</td>\n",
       "      <td>3767</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>(#2) 8 (185) 2064</td>\n",
       "      <td>2</td>\n",
       "      <td>test</td>\n",
       "      <td>1200</td>\n",
       "      <td>new</td>\n",
       "      <td>cr</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         dblock_path  dblock_ticks  log_evcodes  log_ccodes  log_flags  \\\n",
       "204  sub000/dblock_1           611            1           1          0   \n",
       "205  sub000/dblock_1          1061          127           1          0   \n",
       "206  sub000/dblock_1          2062            4           1         32   \n",
       "207  sub000/dblock_1          2516          129           1          0   \n",
       "208  sub000/dblock_1          3767            2           1          0   \n",
       "\n",
       "                regexp  match_code phase  test_bin_id test_response accuracy  \n",
       "204  (#1) 2064 8 (127)           1  test         1102           new       cr  \n",
       "205  (#1) 2064 8 (127)         127  test         1102           new       cr  \n",
       "206  (#4) 8 (129) 1040           4  test         1400           old      hit  \n",
       "207  (#4) 8 (129) 1040         129  test         1400           old      hit  \n",
       "208  (#2) 8 (185) 2064           2  test         1200           new       cr  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>dblock_path</th>\n",
       "      <th>dblock_ticks</th>\n",
       "      <th>log_evcodes</th>\n",
       "      <th>log_ccodes</th>\n",
       "      <th>log_flags</th>\n",
       "      <th>regexp</th>\n",
       "      <th>match_code</th>\n",
       "      <th>phase</th>\n",
       "      <th>test_bin_id</th>\n",
       "      <th>test_response</th>\n",
       "      <th>accuracy</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>854</th>\n",
       "      <td>sub000/dblock_3</td>\n",
       "      <td>27315</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>(#[1234])</td>\n",
       "      <td>4</td>\n",
       "      <td>test</td>\n",
       "      <td>0</td>\n",
       "      <td>cal</td>\n",
       "      <td>cal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>855</th>\n",
       "      <td>sub000/dblock_3</td>\n",
       "      <td>27444</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>(#[1234])</td>\n",
       "      <td>2</td>\n",
       "      <td>test</td>\n",
       "      <td>0</td>\n",
       "      <td>cal</td>\n",
       "      <td>cal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>856</th>\n",
       "      <td>sub000/dblock_3</td>\n",
       "      <td>27573</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>(#[1234])</td>\n",
       "      <td>3</td>\n",
       "      <td>test</td>\n",
       "      <td>0</td>\n",
       "      <td>cal</td>\n",
       "      <td>cal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>857</th>\n",
       "      <td>sub000/dblock_3</td>\n",
       "      <td>27703</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>(#[1234])</td>\n",
       "      <td>4</td>\n",
       "      <td>test</td>\n",
       "      <td>0</td>\n",
       "      <td>cal</td>\n",
       "      <td>cal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>858</th>\n",
       "      <td>sub000/dblock_3</td>\n",
       "      <td>27832</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>(#[1234])</td>\n",
       "      <td>2</td>\n",
       "      <td>test</td>\n",
       "      <td>0</td>\n",
       "      <td>cal</td>\n",
       "      <td>cal</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         dblock_path  dblock_ticks  log_evcodes  log_ccodes  log_flags  \\\n",
       "854  sub000/dblock_3         27315            4           0          0   \n",
       "855  sub000/dblock_3         27444            2           0          0   \n",
       "856  sub000/dblock_3         27573            3           0          0   \n",
       "857  sub000/dblock_3         27703            4           0          0   \n",
       "858  sub000/dblock_3         27832            2           0          0   \n",
       "\n",
       "        regexp  match_code phase  test_bin_id test_response accuracy  \n",
       "854  (#[1234])           4  test            0           cal      cal  \n",
       "855  (#[1234])           2  test            0           cal      cal  \n",
       "856  (#[1234])           3  test            0           cal      cal  \n",
       "857  (#[1234])           4  test            0           cal      cal  \n",
       "858  (#[1234])           2  test            0           cal      cal  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "is_anchor:  True\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>accuracy</th>\n",
       "      <th>_any</th>\n",
       "      <th>cal</th>\n",
       "      <th>cr</th>\n",
       "      <th>fa</th>\n",
       "      <th>hit</th>\n",
       "      <th>All</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>data_group</th>\n",
       "      <th>test_bin_id</th>\n",
       "      <th>animacy</th>\n",
       "      <th>stimulus</th>\n",
       "      <th>test_response</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"14\" valign=\"top\">sub000</th>\n",
       "      <th>0</th>\n",
       "      <th>cal</th>\n",
       "      <th>cal</th>\n",
       "      <th>cal</th>\n",
       "      <td>0</td>\n",
       "      <td>209</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>209</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <th>_any</th>\n",
       "      <th>_any</th>\n",
       "      <th>_any</th>\n",
       "      <td>100</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <th>animate</th>\n",
       "      <th>distractor</th>\n",
       "      <th>_any</th>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <th>inanimate</th>\n",
       "      <th>distractor</th>\n",
       "      <th>_any</th>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <th>animate</th>\n",
       "      <th>studied</th>\n",
       "      <th>_any</th>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <th>inanimate</th>\n",
       "      <th>studied</th>\n",
       "      <th>_any</th>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1100</th>\n",
       "      <th>animate</th>\n",
       "      <th>distractor</th>\n",
       "      <th>new</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1102</th>\n",
       "      <th>animate</th>\n",
       "      <th>distractor</th>\n",
       "      <th>new</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1200</th>\n",
       "      <th>inanimate</th>\n",
       "      <th>distractor</th>\n",
       "      <th>new</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>32</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1201</th>\n",
       "      <th>inanimate</th>\n",
       "      <th>distractor</th>\n",
       "      <th>new</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1202</th>\n",
       "      <th>inanimate</th>\n",
       "      <th>distractor</th>\n",
       "      <th>new</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1210</th>\n",
       "      <th>inanimate</th>\n",
       "      <th>distractor</th>\n",
       "      <th>old</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1300</th>\n",
       "      <th>animate</th>\n",
       "      <th>studied</th>\n",
       "      <th>old</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1400</th>\n",
       "      <th>inanimate</th>\n",
       "      <th>studied</th>\n",
       "      <th>old</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>35</td>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>All</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <td>200</td>\n",
       "      <td>209</td>\n",
       "      <td>49</td>\n",
       "      <td>1</td>\n",
       "      <td>50</td>\n",
       "      <td>509</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "accuracy                                                   _any  cal  cr  fa  \\\n",
       "data_group test_bin_id animacy   stimulus   test_response                      \n",
       "sub000     0           cal       cal        cal               0  209   0   0   \n",
       "           10          _any      _any       _any            100    0   0   0   \n",
       "           11          animate   distractor _any             15    0   0   0   \n",
       "           12          inanimate distractor _any             35    0   0   0   \n",
       "           13          animate   studied    _any             15    0   0   0   \n",
       "           14          inanimate studied    _any             35    0   0   0   \n",
       "           1100        animate   distractor new               0    0  14   0   \n",
       "           1102        animate   distractor new               0    0   1   0   \n",
       "           1200        inanimate distractor new               0    0  32   0   \n",
       "           1201        inanimate distractor new               0    0   1   0   \n",
       "           1202        inanimate distractor new               0    0   1   0   \n",
       "           1210        inanimate distractor old               0    0   0   1   \n",
       "           1300        animate   studied    old               0    0   0   0   \n",
       "           1400        inanimate studied    old               0    0   0   0   \n",
       "All                                                         200  209  49   1   \n",
       "\n",
       "accuracy                                                   hit  All  \n",
       "data_group test_bin_id animacy   stimulus   test_response            \n",
       "sub000     0           cal       cal        cal              0  209  \n",
       "           10          _any      _any       _any             0  100  \n",
       "           11          animate   distractor _any             0   15  \n",
       "           12          inanimate distractor _any             0   35  \n",
       "           13          animate   studied    _any             0   15  \n",
       "           14          inanimate studied    _any             0   35  \n",
       "           1100        animate   distractor new              0   14  \n",
       "           1102        animate   distractor new              0    1  \n",
       "           1200        inanimate distractor new              0   32  \n",
       "           1201        inanimate distractor new              0    1  \n",
       "           1202        inanimate distractor new              0    1  \n",
       "           1210        inanimate distractor old              0    1  \n",
       "           1300        animate   studied    old             15   15  \n",
       "           1400        inanimate studied    old             35   35  \n",
       "All                                                         50  509  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "is_anchor:  False\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>accuracy</th>\n",
       "      <th>cr</th>\n",
       "      <th>fa</th>\n",
       "      <th>hit</th>\n",
       "      <th>All</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>data_group</th>\n",
       "      <th>test_bin_id</th>\n",
       "      <th>animacy</th>\n",
       "      <th>stimulus</th>\n",
       "      <th>test_response</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"8\" valign=\"top\">sub000</th>\n",
       "      <th>1100</th>\n",
       "      <th>animate</th>\n",
       "      <th>distractor</th>\n",
       "      <th>new</th>\n",
       "      <td>14</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1102</th>\n",
       "      <th>animate</th>\n",
       "      <th>distractor</th>\n",
       "      <th>new</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1200</th>\n",
       "      <th>inanimate</th>\n",
       "      <th>distractor</th>\n",
       "      <th>new</th>\n",
       "      <td>32</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1201</th>\n",
       "      <th>inanimate</th>\n",
       "      <th>distractor</th>\n",
       "      <th>new</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1202</th>\n",
       "      <th>inanimate</th>\n",
       "      <th>distractor</th>\n",
       "      <th>new</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1210</th>\n",
       "      <th>inanimate</th>\n",
       "      <th>distractor</th>\n",
       "      <th>old</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1300</th>\n",
       "      <th>animate</th>\n",
       "      <th>studied</th>\n",
       "      <th>old</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1400</th>\n",
       "      <th>inanimate</th>\n",
       "      <th>studied</th>\n",
       "      <th>old</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>35</td>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>All</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <td>49</td>\n",
       "      <td>1</td>\n",
       "      <td>50</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "accuracy                                                   cr  fa  hit  All\n",
       "data_group test_bin_id animacy   stimulus   test_response                  \n",
       "sub000     1100        animate   distractor new            14   0    0   14\n",
       "           1102        animate   distractor new             1   0    0    1\n",
       "           1200        inanimate distractor new            32   0    0   32\n",
       "           1201        inanimate distractor new             1   0    0    1\n",
       "           1202        inanimate distractor new             1   0    0    1\n",
       "           1210        inanimate distractor old             0   1    0    1\n",
       "           1300        animate   studied    old             0   0   15   15\n",
       "           1400        inanimate studied    old             0   0   35   35\n",
       "All                                                        49   1   50  100"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(\"test phase (shape):\", pm_test_event_table.shape)\n",
    "print(\"test phase columns:\", pm_test_event_table.columns)\n",
    "\n",
    "# select some columns to show\n",
    "example_columns = [\n",
    "    \"dblock_path\", \"dblock_ticks\", \"log_evcodes\", \"log_ccodes\", \"log_flags\", \n",
    "    \"regexp\", \"match_code\", \n",
    "    \"phase\", \"test_bin_id\", \"test_response\", \"accuracy\", \n",
    "]\n",
    "\n",
    "\n",
    "# first few stimulus events, coded for response\n",
    "display(pm_test_event_table[example_columns].query(\"test_bin_id > 1000\").head())\n",
    "\n",
    "# last few calibration pulse events\n",
    "display(pm_test_event_table[example_columns].tail())\n",
    "\n",
    "for is_anchor in [True, False]:\n",
    "    print(\"is_anchor: \", is_anchor)\n",
    "    events = pm_test_event_table.query(\"is_anchor == @is_anchor \")\n",
    "    \n",
    "    display(\n",
    "        pd.crosstab(\n",
    "            [\n",
    "                events.data_group,\n",
    "                # events.ccode,\n",
    "                events.test_bin_id,\n",
    "                events.animacy, \n",
    "                events.stimulus, \n",
    "                events.test_response\n",
    "            ],\n",
    "            [\n",
    "                events.accuracy\n",
    "            ],\n",
    "            margins=True\n",
    "        )\n",
    "    )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Prune study phase event table for epochs and tag with test phase responses**\n",
    "\n",
    "The study events were double counted as stim only and again as stim + response in order to verify code mapping\n",
    "\n",
    "Now drop redundant stim-only events"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ----------------------------------------------\n",
    "# prune event tables to unique single trials\n",
    "# ----------------------------------------------\n",
    "\n",
    "# study phase response tagged single trials are coded with study table bin id > 2000\n",
    "pm_study_events_for_epochs = pm_study_event_table.query(\n",
    "    \"is_anchor==True and study_bin_id >= 2000\"\n",
    ").copy().set_index(\"item_id\").sort_index()\n",
    "\n",
    "# test phase response-tagged single trials are coded with test table bin id > 1000\n",
    "pm_test_events_for_epochs = pm_test_event_table.query(\n",
    "    \"is_anchor==True and test_bin_id >= 1000\"\n",
    ").copy().set_index(\"item_id\").sort_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Study phase items before ...\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(50, 32)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>match_code</th>\n",
       "      <th>anchor_code</th>\n",
       "      <th>log_evcodes</th>\n",
       "      <th>phase</th>\n",
       "      <th>study_response</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>item_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>101</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>study</td>\n",
       "      <td>dislike</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>103</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>study</td>\n",
       "      <td>dislike</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>106</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>study</td>\n",
       "      <td>like</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>107</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>study</td>\n",
       "      <td>like</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>112</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>study</td>\n",
       "      <td>dislike</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         match_code  anchor_code  log_evcodes  phase study_response\n",
       "item_id                                                            \n",
       "101               1            1            1  study        dislike\n",
       "103               2            2            2  study        dislike\n",
       "106               1            1            1  study           like\n",
       "107               2            2            2  study           like\n",
       "112               2            2            2  study        dislike"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Study phase items after joining test phase responses ...\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(50, 34)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>match_code</th>\n",
       "      <th>anchor_code</th>\n",
       "      <th>log_evcodes</th>\n",
       "      <th>phase</th>\n",
       "      <th>study_response</th>\n",
       "      <th>test_response</th>\n",
       "      <th>accuracy</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>item_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>101</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>study</td>\n",
       "      <td>dislike</td>\n",
       "      <td>old</td>\n",
       "      <td>hit</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>103</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>study</td>\n",
       "      <td>dislike</td>\n",
       "      <td>old</td>\n",
       "      <td>hit</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>106</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>study</td>\n",
       "      <td>like</td>\n",
       "      <td>old</td>\n",
       "      <td>hit</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>107</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>study</td>\n",
       "      <td>like</td>\n",
       "      <td>old</td>\n",
       "      <td>hit</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>112</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>study</td>\n",
       "      <td>dislike</td>\n",
       "      <td>old</td>\n",
       "      <td>hit</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         match_code  anchor_code  log_evcodes  phase study_response  \\\n",
       "item_id                                                               \n",
       "101               1            1            1  study        dislike   \n",
       "103               2            2            2  study        dislike   \n",
       "106               1            1            1  study           like   \n",
       "107               2            2            2  study           like   \n",
       "112               2            2            2  study        dislike   \n",
       "\n",
       "        test_response accuracy  \n",
       "item_id                         \n",
       "101               old      hit  \n",
       "103               old      hit  \n",
       "106               old      hit  \n",
       "107               old      hit  \n",
       "112               old      hit  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# --------------------------------------------------------\n",
    "# update study phase events with test phase responses\n",
    "# --------------------------------------------------------\n",
    "\n",
    "# just for summary display ...\n",
    "display_cols = [\"match_code\", \"anchor_code\", \"log_evcodes\", \"phase\", \"study_response\"]\n",
    "\n",
    "# test response tags\n",
    "test_s_r_cols = [\"test_response\", \"accuracy\"]\n",
    "\n",
    "print(\"Study phase items before ...\")\n",
    "display(pm_study_events_for_epochs.shape)\n",
    "display(pm_study_events_for_epochs[display_cols].head())\n",
    "\n",
    "# align the test phase subsequent responses with the study phase items\n",
    "pm_study_events_for_epochs = (\n",
    "    pm_study_events_for_epochs\n",
    "    .join(\n",
    "        pm_test_events_for_epochs[test_s_r_cols],\n",
    "        how=\"left\",\n",
    "        on=\"item_id\",\n",
    "    )\n",
    ")\n",
    "\n",
    "print(\"Study phase items after joining test phase responses ...\")\n",
    "display(pm_study_events_for_epochs.shape)\n",
    "display(pm_study_events_for_epochs[display_cols + test_s_r_cols].head())\n",
    "           "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test phase items before: (100, 34)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>match_code</th>\n",
       "      <th>anchor_code</th>\n",
       "      <th>log_evcodes</th>\n",
       "      <th>phase</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>item_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>101</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>test</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>102</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>test</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>103</th>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>test</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>104</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>test</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>105</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>test</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>106</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>test</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>107</th>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>test</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>108</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>test</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>109</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>test</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>test</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>111</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>test</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>112</th>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>test</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         match_code  anchor_code  log_evcodes phase\n",
       "item_id                                            \n",
       "101               3            3            3  test\n",
       "102               1            1            1  test\n",
       "103               4            4            4  test\n",
       "104               2            2            2  test\n",
       "105               2            2            2  test\n",
       "106               3            3            3  test\n",
       "107               4            4            4  test\n",
       "108               1            1            1  test\n",
       "109               2            2            2  test\n",
       "110               1            1            1  test\n",
       "111               2            2            2  test\n",
       "112               4            4            4  test"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test phase items after (100, 35)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>match_code</th>\n",
       "      <th>anchor_code</th>\n",
       "      <th>log_evcodes</th>\n",
       "      <th>phase</th>\n",
       "      <th>study_response</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>item_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>101</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>test</td>\n",
       "      <td>dislike</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>102</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>test</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>103</th>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>test</td>\n",
       "      <td>dislike</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>104</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>test</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>105</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>test</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>106</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>test</td>\n",
       "      <td>like</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>107</th>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>test</td>\n",
       "      <td>like</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>108</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>test</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>109</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>test</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>test</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>111</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>test</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>112</th>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>test</td>\n",
       "      <td>dislike</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         match_code  anchor_code  log_evcodes phase study_response\n",
       "item_id                                                           \n",
       "101               3            3            3  test        dislike\n",
       "102               1            1            1  test            NaN\n",
       "103               4            4            4  test        dislike\n",
       "104               2            2            2  test            NaN\n",
       "105               2            2            2  test            NaN\n",
       "106               3            3            3  test           like\n",
       "107               4            4            4  test           like\n",
       "108               1            1            1  test            NaN\n",
       "109               2            2            2  test            NaN\n",
       "110               1            1            1  test            NaN\n",
       "111               2            2            2  test            NaN\n",
       "112               4            4            4  test        dislike"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# --------------------------------------------------------\n",
    "# update test phase event table with study phase responses\n",
    "# ---------------------------------------------------------\n",
    "\n",
    "# just for summary display ...\n",
    "display_cols = [\"match_code\", \"anchor_code\", \"log_evcodes\", \"phase\"]\n",
    "\n",
    "\n",
    "# study response tags to map to the other phase\n",
    "study_s_r_cols = [\"study_response\"]\n",
    "\n",
    "\n",
    "print(\"Test phase items before:\", pm_test_events_for_epochs.shape)\n",
    "display(pm_test_events_for_epochs[display_cols].head(12))\n",
    "\n",
    "# align the study phase like/dislike responses with the test phase items\n",
    "pm_test_events_for_epochs = (\n",
    "    pm_test_events_for_epochs\n",
    "    .join(\n",
    "        pm_study_events_for_epochs[\"study_response\"],\n",
    "        how=\"left\",\n",
    "        on=\"item_id\",\n",
    "    )\n",
    ")\n",
    "\n",
    "print(\"Test phase items after\", pm_test_events_for_epochs.shape)\n",
    "display(pm_test_events_for_epochs[display_cols + study_s_r_cols].head(12))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**study phase set_epochs(*name*, *pre*, *post*)**\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sanitizing event table data types for mkh5 epochs table ...\n"
     ]
    }
   ],
   "source": [
    "pm_h5.set_epochs(\"study_ms1500\", pm_study_events_for_epochs, -750, 750)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**study phase export_epochs(*name*)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "pm_h5.export_epochs(\"study_ms1500\", MDE_HOME / \"data/sub000pm.study_ms1500.epochs.pdh5\", file_format=\"pdh5\")      "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**test phase set_epochs(*name*, *pre*, *post*)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sanitizing event table data types for mkh5 epochs table ...\n"
     ]
    }
   ],
   "source": [
    "pm_h5.set_epochs(\"test_ms1500\", pm_test_events_for_epochs, -750, 750)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**test phase export_epochs(*name*)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "pm_h5.export_epochs(\"test_ms1500\", MDE_HOME / \"data/sub000pm.test_ms1500.epochs.pdh5\", file_format=\"pdh5\")      "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Analyze the epochs**\n",
    "\n",
    "* Is there a difference between like and dislike at study?\n",
    "\n",
    "* Is there a difference between old and new at test?\n",
    "\n",
    "* If so is it the same for liked and disliked?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# matplotlib line colors, background, fonts\n",
    "plt.style.use(\"bmh\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Study phase time-domain average ERPs**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "After excluding EEG artifacts\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>log_flags</th>\n",
       "      <th>0</th>\n",
       "      <th>All</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ccode</th>\n",
       "      <th>animacy</th>\n",
       "      <th>study_response</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">2</th>\n",
       "      <th rowspan=\"3\" valign=\"top\">animate</th>\n",
       "      <th>dislike</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>like</th>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>no_response</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">inanimate</th>\n",
       "      <th>dislike</th>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>like</th>\n",
       "      <td>23</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>All</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <td>48</td>\n",
       "      <td>48</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "log_flags                        0  All\n",
       "ccode animacy   study_response         \n",
       "2     animate   dislike          3    3\n",
       "                like            10   10\n",
       "                no_response      1    1\n",
       "      inanimate dislike         11   11\n",
       "                like            23   23\n",
       "All                             48   48"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# load and sanitize epoch_id for pandas index\n",
    "pm_study_epochs = pd.read_hdf(MDE_HOME / \"data/sub000pm.study_ms1500.epochs.pdh5\", key = \"study_ms1500\")\n",
    "pm_study_epochs['epoch_id'] = pm_study_epochs['epoch_id'].astype('int')\n",
    "\n",
    "# exclude epochs flagged for artifacts\n",
    "pm_study_epochs = epf.drop_bad_epochs(\n",
    "    pm_study_epochs, \n",
    "    bads_column=\"log_flags\", \n",
    "    epoch_id=\"epoch_id\", \n",
    "    time=\"match_time\"\n",
    ")\n",
    "\n",
    "\n",
    "# check the good event counts after dropping artifacts\n",
    "pm_study_good_events = pm_study_epochs.query(\"match_time == 0\")\n",
    "\n",
    "print(\"After excluding EEG artifacts\")\n",
    "display(\n",
    "    pd.crosstab(\n",
    "        [\n",
    "            pm_study_good_events.ccode, \n",
    "            pm_study_good_events.animacy,\n",
    "            pm_study_good_events.study_response, \n",
    "        ],\n",
    "        [\n",
    "            pm_study_good_events.log_flags\n",
    "        ],\n",
    "        margins=True\n",
    "    )\n",
    ")\n",
    "\n",
    "# for illustration ... \n",
    "midline = [\"MiPf\", \"MiCe\", \"MiPa\", \"MiOc\"]\n",
    "\n",
    "# select COLUMNS: epoch index, timestamps, event tags, and midline EEG columns\n",
    "midline_epochs = pm_study_epochs[[\"epoch_id\", \"match_time\", \"animacy\", \"study_response\"] + midline]\n",
    "\n",
    "# select ROWS: use tag values to pick and choose\n",
    "midline_epochs = midline_epochs.query(\"study_response in ['like', 'dislike']\")\n",
    "\n",
    "# center each channel \n",
    "midline_epochs = epf.center_eeg(\n",
    "    midline_epochs, \n",
    "    midline, \n",
    "    -750, 0, \n",
    "    epoch_id=\"epoch_id\", \n",
    "    time=\"match_time\"\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'NoneType' object has no attribute 'groupby'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-21-69ce2820f20e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m     \u001b[0;31m# compute domain average by stim type\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m     midline_erps = midline_epochs.groupby(\n\u001b[0m\u001b[1;32m      5\u001b[0m         \u001b[0mgrp\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m\"match_time\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m     ).mean().reset_index()\n",
      "\u001b[0;31mAttributeError\u001b[0m: 'NoneType' object has no attribute 'groupby'"
     ]
    }
   ],
   "source": [
    "for grp in [[\"animacy\"], [\"study_response\"], [\"animacy\", \"study_response\"]]:\n",
    "\n",
    "    # compute domain average by stim type\n",
    "    midline_erps = midline_epochs.groupby(\n",
    "        grp + [\"match_time\"]\n",
    "    ).mean().reset_index()\n",
    "\n",
    "    # plot\n",
    "    f, axs = plt.subplots(1, 4, figsize=(14,8), sharex=True)\n",
    "    for rep, erp in midline_erps.groupby(grp):\n",
    "        for axi, chan in enumerate(midline):\n",
    "        \n",
    "            # mark onset\n",
    "            axs[axi].axhline(0, color='gray')\n",
    "        \n",
    "            # plot erp\n",
    "            axs[axi].plot(\n",
    "                erp[chan],\n",
    "                erp[\"match_time\"],\n",
    "                label=f\"{rep}\",\n",
    "                lw=2,\n",
    "            )\n",
    "\n",
    "            # channel\n",
    "            axs[axi].set(xlim=(-15, 20), xlabel=chan)\n",
    "\n",
    "    axs[0].legend(loc=\"lower right\")\n",
    "    axs[0].set_title(f\"Study phase:\\n{':'.join(grp)}\", fontsize=12, loc=\"left\")\n",
    "    f.tight_layout()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**test phase time-domain average ERPs**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# load and sanitize epoch_id for pandas index\n",
    "pm_test_epochs = pd.read_hdf(MDE_HOME / \"data/sub000pm.test_ms1500.epochs.pdh5\", key = \"test_ms1500\")\n",
    "pm_test_epochs['epoch_id'] = pm_test_epochs['epoch_id'].astype('int')\n",
    "print(pm_test_epochs.columns)\n",
    "\n",
    "# drop EEG epochs tagged as bad\n",
    "pm_test_epochs = epf.drop_bad_epochs(\n",
    "    pm_test_epochs, \n",
    "    bads_column=\"log_flags\",\n",
    "    epoch_id=\"epoch_id\",\n",
    "    time=\"match_time\"\n",
    ")\n",
    "\n",
    "# check the good event counts after dropping artifacts\n",
    "pm_test_good_events = pm_test_epochs.query(\"match_time == 0\")\n",
    "\n",
    "print(\"After excluding EEG artifacts\")\n",
    "display(\n",
    "    pd.crosstab(\n",
    "        [\n",
    "            pm_test_good_events.ccode, \n",
    "            pm_test_good_events.animacy,\n",
    "            pm_test_good_events.test_response, \n",
    "        ],\n",
    "        [\n",
    "            pm_test_good_events.log_flags\n",
    "        ],\n",
    "        margins=True\n",
    "    )\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# for illustration ... \n",
    "midline = [\"MiPf\", \"MiCe\", \"MiPa\", \"MiOc\"]\n",
    "\n",
    "# select COLUMNS: epoch index, timestamps, event tags, and midline EEG columns\n",
    "midline_epochs = pm_test_epochs[[\"epoch_id\", \"match_time\", \"animacy\", \"test_response\"] + midline]\n",
    "\n",
    "# select ROWS: use tag values to pick and choose\n",
    "midline_epochs = midline_epochs.query(\"test_response in ['old', 'new']\")\n",
    "\n",
    "# center each channel \n",
    "midline_epochs = epf.center_eeg(\n",
    "    midline_epochs, \n",
    "    midline, \n",
    "    -750, 0, \n",
    "    epoch_id=\"epoch_id\", \n",
    "    time=\"match_time\"\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# plot separately and together\n",
    "for grp in [[\"animacy\"], [\"test_response\"], [\"animacy\", \"test_response\"]]:\n",
    "\n",
    "    # compute domain average by stim type\n",
    "    midline_erps = midline_epochs.groupby(\n",
    "        grp + [\"match_time\"]\n",
    "    ).mean().reset_index()\n",
    "\n",
    "    # plot\n",
    "    f, axs = plt.subplots(1, 4, figsize=(14,8))\n",
    "\n",
    "    for (rep), erp in midline_erps.groupby(grp):\n",
    "        for axi, chan in enumerate(midline):\n",
    "        \n",
    "            # mark onset\n",
    "            axs[axi].axhline(0, color='gray')\n",
    "        \n",
    "            # plot erp\n",
    "            axs[axi].plot(\n",
    "                erp[chan],\n",
    "                erp[\"match_time\"],\n",
    "                label=f\"{rep}\",\n",
    "                lw=2,\n",
    "            )\n",
    "\n",
    "            axs[axi].set(xlim=(-10, 10), xlabel=chan)\n",
    "            \n",
    "\n",
    "    axs[0].legend(loc=\"lower right\")\n",
    "    axs[0].set_title(f\"test phase:\\n{':'.join(grp)}\", fontsize=12)\n",
    "    f.tight_layout()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Single subject pipeline with epoch export in different formats**\n",
    "\n",
    "build and calibrate the mkpy HDF5 format data file\n",
    "\n",
    "1. get_event_table(*codemap*) and \n",
    "\n",
    "    **modify the event tables** \n",
    "    \n",
    "   \n",
    "2. set_epoch_table(*name*, *event_table*, *pre*, *post*)        \n",
    "3. export_epochs(*name*, *file_format=...*)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# convert to HDF5 and calibrate\n",
    "pm_h5 = mkh5.mkh5(pm_h5_f)\n",
    "pm_h5.reset_all()\n",
    "pm_h5.create_mkdata(\"sub000\", crw, log, yhdr)\n",
    "\n",
    "pm_h5.append_mkdata(\"sub000\", cals_crw, cals_log, cals_yhdr)\n",
    "\n",
    "pts, pulse, lo, hi, ccode = 5, 10, -40, 40, 0\n",
    "pm_h5.calibrate_mkdata(\n",
    "    \"sub000\",  \n",
    "    n_points=pts, \n",
    "    cal_size=pulse,\n",
    "    lo_cursor=lo,\n",
    "    hi_cursor=hi,\n",
    "    cal_ccode=ccode,\n",
    ")\n",
    "\n",
    "# 1. scan study and test phase events into the event tables\n",
    "pm_test_study_table = pm_h5.get_event_table(pm_study_codemap_f)\n",
    "pm_test_event_table = pm_h5.get_event_table(pm_test_codemap_f)\n",
    "\n",
    "# --------------------------------------------\n",
    "# MODIFY THE STUDY AND TEST PHASE EVENT TABLES\n",
    "# ---------------------------------------------\n",
    "\n",
    "# 1.1 prune both event tables to unique single trials\n",
    "\n",
    "# study phase response tagged single trials are coded \n",
    "# with study table bin id > 2000\n",
    "pm_study_events_for_epochs = pm_study_event_table.query(\n",
    "    \"is_anchor==True and study_bin_id >= 2000\"\n",
    ").copy().set_index(\"item_id\").sort_index()\n",
    "\n",
    "# test phase response-tagged single trials are coded\n",
    "# with test table bin id > 1000\n",
    "pm_test_events_for_epochs = pm_test_event_table.query(\n",
    "    \"is_anchor==True and test_bin_id >= 1000\"\n",
    ").copy().set_index(\"item_id\").sort_index()\n",
    "\n",
    "# 1.2 align the study phase items with subsequent test phase subsequent responses\n",
    "pm_study_events_for_epochs = (\n",
    "    pm_study_events_for_epochs\n",
    "    .join(\n",
    "        pm_test_events_for_epochs[test_s_r_cols],\n",
    "        how=\"left\",\n",
    "        on=\"item_id\",\n",
    "    )\n",
    ")\n",
    "\n",
    "# 1.3 align test phase items with the previous study phase like/dislike responses \n",
    "pm_test_events_for_epochs = (\n",
    "    pm_test_events_for_epochs\n",
    "    .join(\n",
    "        pm_study_events_for_epochs[\"study_response\"],\n",
    "        how=\"left\",\n",
    "        on=\"item_id\",\n",
    "    )\n",
    ")\n",
    "\n",
    "\n",
    "# ---------------------------------------------\n",
    "# Set and export epochs\n",
    "# ---------------------------------------------\n",
    "epoch_specs  = {\n",
    "    # epoch_name: (pre, post)\n",
    "    \"ms100\": (-50, 50),\n",
    "    \"ms1500\": (-750, 750),\n",
    "    \"ms3000\": (-1500, 1500),\n",
    "    \"ms10000\": (-5000, 5000),\n",
    "}\n",
    "\n",
    "# loop on the phases\n",
    "phases = {\n",
    "    \"study\": pm_study_events_for_epochs, \n",
    "    \"test\": pm_test_events_for_epochs\n",
    "}\n",
    "for phase, events in phases.items():\n",
    "    for epoch_name, (pre, post) in epoch_specs.items():\n",
    "        \n",
    "        key=f\"{phase}_{epoch_name}\"\n",
    "        print(key, pre, post)\n",
    "\n",
    "        pm_h5.set_epochs(key, events, pre, post)\n",
    "        \n",
    "        # multiple export formats for demonstration, in practice pick one\n",
    "        fformats = [\"h5\", \"pdh5\", \"feather\"]\n",
    "        for ffmt in fformats:\n",
    "            _fname = f\"{MDE_HOME}/data/sub000pm.{key}.epochs.{ffmt}\"\n",
    "            print(f\"exporting pm {key} as {ffmt}: {_fname}\")\n",
    "\n",
    "            # this exports the epochs DATA ... EEG and events.\n",
    "            pm_h5.export_epochs(key, _fname, file_format=ffmt)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
